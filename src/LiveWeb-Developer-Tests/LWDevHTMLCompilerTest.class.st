"
A LWDevHTMLCompilerTest is a test class for testing the behavior of LWDevHTMLCompiler
"
Class {
	#name : #LWDevHTMLCompilerTest,
	#superclass : #TestCase,
	#category : #'LiveWeb-Developer-Tests'
}

{ #category : #compiling }
LWDevHTMLCompilerTest >> compileAndRun: parsedHtml argNames: argNames argValues: argValues [ 
  | cls |
  cls := Object subclass: #HtmlCompilerTestGen instanceVariableNames: 'argValues'.
  cls compile: 'argValues: v
 argValues := v'.
  cls compile: (String streamContents: [ :m | m
	<< 'renderOn: __h'; cr; "render method with htmlrenderer param"
	<< ' |'; << (' ' join: argNames); << ' |'; cr. "declare args as locals"
	argNames doWithIndex:  [ :n :i | m << n; << ' := argValues at: '; << i asString; << '.'; cr ].
	m << (LWDevHTMLCompiler new rendererName: '__h'; compile: parsedHtml)
  ]).
 ^String streamContents: [ :out |
	| hg | 
	hg := self htmlGenClass new argValues: argValues.
	hg perform: #renderOn: with: (HTMLRenderer new out: out) 
 ]
  
]

{ #category : #'as yet unclassified' }
LWDevHTMLCompilerTest >> htmlGenClass [ 
 ^ self class environment
		at: #HtmlCompilerTestGen
		ifAbsent: [ nil ]
]

{ #category : #compiling }
LWDevHTMLCompilerTest >> tearDown [
  "Remove class that was generated by HTML->Smalltalk compilation"
  self htmlGenClass ifNotNil: [:c | c removeFromSystem].
 super tearDown 
]

{ #category : #tests }
LWDevHTMLCompilerTest >> testSimpleListing [
 	"The first test case I came up with, uses lw:for and lw:content attributes."
	self assert:
	(self compileAndRun: { 'DIV'. {'class' -> 'todo'} asDictionary. 
								 { 'UL'. Dictionary new. 
								   { 'LI'. { 'lw:repeat' -> 'x items' } asDictionary. '{{x name}}' }}}
		  argNames: #( items )
		  argValues: { { OrderedCollection. Dictionary } })
		equals: '<div class="todo"><ul><li>OrderedCollection</li><li>Dictionary</li></ul></div>'

]

{ #category : #tests }
LWDevHTMLCompilerTest >> testSimpleTableStriped [ 
 	"The first test case I came up with, uses lw:for and lw:content attributes."
	self assert:
	(self compileAndRun: { 'TABLE'. {'class' -> 'table striped'} asDictionary. 
								 { 'TR'. {'lw:repeat'->'row rows'. 'lw:index'->'i'} asDictionary. 
								   { 'TD'. { 'class' -> 'cell-{{i even ifTrue:[''even''] ifFalse:[''odd'']}}' } asDictionary. '{{row name}}' }}}
		  argNames: #( rows )
		  argValues: { { OrderedCollection. Dictionary. Array } })
		equals: '<table class="table striped"><tr><td class="cell-odd">OrderedCollection</td></tr><tr><td class="cell-even">Dictionary</td></tr><tr><td class="cell-odd">Array</td></tr></table>'
]

{ #category : #tests }
LWDevHTMLCompilerTest >> testSplitMustache [
 | c |
 c := LWDevHTMLCompiler new.
 self assert: (c splitMustache: 'something {{completely}} different')
      equals: #('''something ''' 'completely' ''' different''') asOrderedCollection.
 self assert: (c splitMustache: 'I have no code blocks')
      equals: #('''I have no code blocks''') asOrderedCollection.
 self assert: (c splitMustache: '')
      equals: OrderedCollection empty.
 self assert: (c splitMustache: '{{foo bar}}')
		equals: #('foo bar') asOrderedCollection 
]
