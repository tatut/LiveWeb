"
I output HTML to a WriteStream.

All HTML5 and SVG tags are implemented as messages
to render that element. There are variants of the 
messages for rendering an element with or without
attributes.

"
Class {
	#name : #HTMLRenderer,
	#superclass : #Object,
	#instVars : [
		'out',
		'id',
		'ctx',
		'component',
		'attributeRenderer',
		'jsWriter'
	],
	#classVars : [
		'BooleanAttributes',
		'EscapedCharacters',
		'VoidElementTags'
	],
	#category : #'LiveWeb-Core'
}

{ #category : #compiling }
HTMLRenderer class >> compileAllTags [ 
	"All HTML5 tags (except obsolete or empty)"
	#( #a #abbr #address #article #aside #audio
		#b #bdi #bdo #blockquote #body #button
		#canvas #caption #cite #code #colgroup
 		#data #datalist #dd #del #details #dfn #dialog #div #dl #dt
 		#em
		#fieldset #figcaption #figure #footer #form
		#head #header #hgroup #h1 #h2 #h3 #h4 #h5 #h6 #html
		#i #iframe #ins
		#kbd #keygen
		#label #legend #li
		#main #map #mark #menu #menuitem #meter
		#nav #noscript
		#object #ol #optgroup #option #output
		#p #picture #pre #progress
		#q
		#rp #rt #ruby
		#s #samp #script #section #select #small #span #strong #style #sub #summary #svg #slot
		#table #tbody #td #template #textarea #tfoot #th #thead #time #title #tr
		#u #ul
		#var #video ) do: [ :t | self compileTag: t ].
		
	"HTML5 empty elements"
	#( #area 
	   #base #br
      #col
      #embed
		#hr
		#img #input
		#link
		#meta
		#param
		#source
		#track
		#wbr ) do: [ :t | self compileEmptyTag: t ].
		
	"All SVG tags not in HTML"
	#( #animate #animateMotion #animateTransform
		#circle #clipPath
		#defs #desc #discard
		#ellipse
		#feBlend #feColorMatrix #feComponentTransfer #feComposite #feConvolveMatrix
		#feDiffuseLighting #feDisplacementMap #feDistantLight #feDropShadow #feFlood
		#feFuncA #feFuncB #feFuncG #feFuncR #feGaussianBlur #feImage #feMerge #feMergeNode
		#feMorphology #feOffset #fePointLight #feSpecularLighting #feSpotLight #feTile
		#feTurbulence #filter #foreignObject
		#g
		#hatch #hatchpath
		#image
		#line #linearGradient
		#marker #mask #mesh #meshgradient #meshpatch #meshrow #metadata #mpath
		#path #pattern #polygon #polyline
		#radialGradient #rect
		#script #set #stop #style #switch #symbol
		#text #textPath #title #tspan
		#use
		#view ) do: [ :t | self compileTag: t ]

]

{ #category : #compiling }
HTMLRenderer class >> compileEmptyTag: aTag [ 
	"Create method for tag (symbol), eg. #div"
	self compile: aTag,'
	  self renderEmpty: #',aTag. 
	self compile: aTag,': attrs
	  self renderEmpty: #',aTag,' attrs: attrs'.
	self organization 
		classify: aTag under: 'autogenerated rendering';
		classify: aTag,':' under: 'autogenerated rendering'
]

{ #category : #compiling }
HTMLRenderer class >> compileTag: aTag [ 
	self compileTag: aTag as: aTag
]

{ #category : #compiling }
HTMLRenderer class >> compileTag: aTag as: selector [ 
	"Create method for tag (symbol), eg. #div"
	self compile: selector,': content
	  self render: #''',aTag,''' with: content'. 
	self compile: selector,': attrs with: content
	  self render: #''',aTag,''' attrs: attrs with: content'.
	self organization 
		classify: aTag,':' under: 'autogenerated rendering';
		classify: aTag,':with:' under: 'autogenerated rendering'
]

{ #category : #initialization }
HTMLRenderer class >> initialize [
	EscapedCharacters := Dictionary new
		add: $& -> '&amp;';
		add: $< -> '&lt;';
		add: $> -> '&gt;';
		add: $" -> '&quot;';
		add: $' -> '&#x27;';
		yourself.		
	
	BooleanAttributes := Set new
		add: 'checked';
		add: 'selected';
		add: 'disabled';
		add: 'readonly'; 
		add: 'multiple';
		add: 'defer'; 
		yourself.
		
	VoidElementTags := #('area' 'base' 'br' 'col' 'embed' 'hr' 'img' 'input'
							  'link' 'meta' 'param' 'source' 'track' 'wbr') asSet. 



]

{ #category : #'instance creation' }
HTMLRenderer class >> on: aWriteStream [ 
	^ self new out: aWriteStream; yourself
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> a: content [
	  self render: #a with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> a: attrs with: content [
	  self render: #a attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> abbr: content [
	  self render: #abbr with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> abbr: attrs with: content [
	  self render: #abbr attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> address: content [
	  self render: #address with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> address: attrs with: content [
	  self render: #address attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> animate: content [
	  self render: #animate with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> animate: attrs with: content [
	  self render: #animate attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> animateMotion: content [
	  self render: #animateMotion with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> animateMotion: attrs with: content [
	  self render: #animateMotion attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> animateTransform: content [
	  self render: #animateTransform with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> animateTransform: attrs with: content [
	  self render: #animateTransform attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> area [
	  self renderEmpty: #area
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> area: attrs [
	  self renderEmpty: #area attrs: attrs
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> article: content [
	  self render: #article with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> article: attrs with: content [
	  self render: #article attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> aside: content [
	  self render: #aside with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> aside: attrs with: content [
	  self render: #aside attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> audio: content [
	  self render: #audio with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> audio: attrs with: content [
	  self render: #audio attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> b: content [
	  self render: #b with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> b: attrs with: content [
	  self render: #b attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> base [
	  self renderEmpty: #base
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> base: attrs [
	  self renderEmpty: #base attrs: attrs
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> bdi: content [
	  self render: #bdi with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> bdi: attrs with: content [
	  self render: #bdi attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> bdo: content [
	  self render: #bdo with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> bdo: attrs with: content [
	  self render: #bdo attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> blockquote: content [
	  self render: #blockquote with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> blockquote: attrs with: content [
	  self render: #blockquote attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> body: content [
	  self render: #body with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> body: attrs with: content [
	  self render: #body attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> br [
	  self renderEmpty: #br
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> br: attrs [
	  self renderEmpty: #br attrs: attrs
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> button: content [
	  self render: #button with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> button: attrs with: content [
	  self render: #button attrs: attrs with: content
]

{ #category : #rendering }
HTMLRenderer >> canSelfClose: tag [ 
 tag = 'textarea' ifTrue: [ ^ false ].
 tag = 'script' ifTrue: [ ^ false ].
 ^ true
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> canvas: content [
	  self render: #canvas with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> canvas: attrs with: content [
	  self render: #canvas attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> caption: content [
	  self render: #caption with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> caption: attrs with: content [
	  self render: #caption attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> circle: content [
	  self render: #circle with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> circle: attrs with: content [
	  self render: #circle attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> cite: content [
	  self render: #cite with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> cite: attrs with: content [
	  self render: #cite attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> clipPath: content [
	  self render: #clipPath with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> clipPath: attrs with: content [
	  self render: #clipPath attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> code: content [
	  self render: #code with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> code: attrs with: content [
	  self render: #code attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> col [
	  self renderEmpty: #col
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> col: attrs [
	  self renderEmpty: #col attrs: attrs
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> colgroup: content [
	  self render: #colgroup with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> colgroup: attrs with: content [
	  self render: #colgroup attrs: attrs with: content
]

{ #category : #accessing }
HTMLRenderer >> component [

	^ component
]

{ #category : #accessing }
HTMLRenderer >> component: anObject [

	component := anObject
]

{ #category : #accessing }
HTMLRenderer >> ctx [ 
 ^ ctx
]

{ #category : #accessing }
HTMLRenderer >> ctx: anObject [

	ctx := anObject
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> data: content [
	  self render: #data with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> data: attrs with: content [
	  self render: #data attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> datalist: content [
	  self render: #datalist with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> datalist: attrs with: content [
	  self render: #datalist attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> dd: content [
	  self render: #dd with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> dd: attrs with: content [
	  self render: #dd attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> defs: content [
	  self render: #defs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> defs: attrs with: content [
	  self render: #defs attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> del: content [
	  self render: #del with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> del: attrs with: content [
	  self render: #del attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> desc: content [
	  self render: #desc with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> desc: attrs with: content [
	  self render: #desc attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> details: content [
	  self render: #details with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> details: attrs with: content [
	  self render: #details attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> dfn: content [
	  self render: #dfn with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> dfn: attrs with: content [
	  self render: #dfn attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> dialog: content [
	  self render: #dialog with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> dialog: attrs with: content [
	  self render: #dialog attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> discard: content [
	  self render: #discard with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> discard: attrs with: content [
	  self render: #discard attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> div: content [
	  self render: #div with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> div: attrs with: content [
	  self render: #div attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> dl: content [
	  self render: #dl with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> dl: attrs with: content [
	  self render: #dl attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> dt: content [
	  self render: #dt with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> dt: attrs with: content [
	  self render: #dt attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> ellipse: content [
	  self render: #ellipse with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> ellipse: attrs with: content [
	  self render: #ellipse attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> em: content [
	  self render: #em with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> em: attrs with: content [
	  self render: #em attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> embed [
	  self renderEmpty: #embed
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> embed: attrs [
	  self renderEmpty: #embed attrs: attrs
]

{ #category : #rendering }
HTMLRenderer >> escapeHtml: text [
	"escape HTML in text for attributes and text content"
	^ String streamContents: [ :s |
		self escapeHtml: text to: s.
	].

]

{ #category : #rendering }
HTMLRenderer >> escapeHtml: text to: stream [
	"escape HTML in text for attributes and text content"
	text do: [ :ch |
		| esc |
		esc := EscapedCharacters at: ch ifAbsent: nil.
		esc ifNil: [ stream nextPut: ch ] ifNotNil: [ stream nextPutAll: esc ]
	].

]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feBlend: content [
	  self render: #feBlend with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feBlend: attrs with: content [
	  self render: #feBlend attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feColorMatrix: content [
	  self render: #feColorMatrix with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feColorMatrix: attrs with: content [
	  self render: #feColorMatrix attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feComponentTransfer: content [
	  self render: #feComponentTransfer with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feComponentTransfer: attrs with: content [
	  self render: #feComponentTransfer attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feComposite: content [
	  self render: #feComposite with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feComposite: attrs with: content [
	  self render: #feComposite attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feConvolveMatrix: content [
	  self render: #feConvolveMatrix with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feConvolveMatrix: attrs with: content [
	  self render: #feConvolveMatrix attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feDiffuseLighting: content [
	  self render: #feDiffuseLighting with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feDiffuseLighting: attrs with: content [
	  self render: #feDiffuseLighting attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feDisplacementMap: content [
	  self render: #feDisplacementMap with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feDisplacementMap: attrs with: content [
	  self render: #feDisplacementMap attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feDistantLight: content [
	  self render: #feDistantLight with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feDistantLight: attrs with: content [
	  self render: #feDistantLight attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feDropShadow: content [
	  self render: #feDropShadow with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feDropShadow: attrs with: content [
	  self render: #feDropShadow attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feFlood: content [
	  self render: #feFlood with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feFlood: attrs with: content [
	  self render: #feFlood attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feFuncA: content [
	  self render: #feFuncA with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feFuncA: attrs with: content [
	  self render: #feFuncA attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feFuncB: content [
	  self render: #feFuncB with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feFuncB: attrs with: content [
	  self render: #feFuncB attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feFuncG: content [
	  self render: #feFuncG with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feFuncG: attrs with: content [
	  self render: #feFuncG attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feFuncR: content [
	  self render: #feFuncR with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feFuncR: attrs with: content [
	  self render: #feFuncR attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feGaussianBlur: content [
	  self render: #feGaussianBlur with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feGaussianBlur: attrs with: content [
	  self render: #feGaussianBlur attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feImage: content [
	  self render: #feImage with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feImage: attrs with: content [
	  self render: #feImage attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feMerge: content [
	  self render: #feMerge with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feMerge: attrs with: content [
	  self render: #feMerge attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feMergeNode: content [
	  self render: #feMergeNode with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feMergeNode: attrs with: content [
	  self render: #feMergeNode attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feMorphology: content [
	  self render: #feMorphology with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feMorphology: attrs with: content [
	  self render: #feMorphology attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feOffset: content [
	  self render: #feOffset with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feOffset: attrs with: content [
	  self render: #feOffset attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> fePointLight: content [
	  self render: #fePointLight with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> fePointLight: attrs with: content [
	  self render: #fePointLight attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feSpecularLighting: content [
	  self render: #feSpecularLighting with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feSpecularLighting: attrs with: content [
	  self render: #feSpecularLighting attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feSpotLight: content [
	  self render: #feSpotLight with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feSpotLight: attrs with: content [
	  self render: #feSpotLight attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feTile: content [
	  self render: #feTile with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feTile: attrs with: content [
	  self render: #feTile attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feTurbulence: content [
	  self render: #feTurbulence with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> feTurbulence: attrs with: content [
	  self render: #feTurbulence attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> fieldset: content [
	  self render: #fieldset with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> fieldset: attrs with: content [
	  self render: #fieldset attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> figcaption: content [
	  self render: #figcaption with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> figcaption: attrs with: content [
	  self render: #figcaption attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> figure: content [
	  self render: #figure with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> figure: attrs with: content [
	  self render: #figure attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> filter: content [
	  self render: #filter with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> filter: attrs with: content [
	  self render: #filter attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> footer: content [
	  self render: #footer with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> footer: attrs with: content [
	  self render: #footer attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> foreignObject: content [
	  self render: #foreignObject with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> foreignObject: attrs with: content [
	  self render: #foreignObject attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> form: content [
	  self render: #form with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> form: attrs with: content [
	  self render: #form attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> g: content [
	  self render: #g with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> g: attrs with: content [
	  self render: #g attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> h1: content [
	  self render: #h1 with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> h1: attrs with: content [
	  self render: #h1 attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> h2: content [
	  self render: #h2 with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> h2: attrs with: content [
	  self render: #h2 attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> h3: content [
	  self render: #h3 with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> h3: attrs with: content [
	  self render: #h3 attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> h4: content [
	  self render: #h4 with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> h4: attrs with: content [
	  self render: #h4 attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> h5: content [
	  self render: #h5 with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> h5: attrs with: content [
	  self render: #h5 attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> h6: content [
	  self render: #h6 with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> h6: attrs with: content [
	  self render: #h6 attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> hatch: content [
	  self render: #hatch with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> hatch: attrs with: content [
	  self render: #hatch attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> hatchpath: content [
	  self render: #hatchpath with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> hatchpath: attrs with: content [
	  self render: #hatchpath attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> head: content [
	  self render: #head with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> head: attrs with: content [
	  self render: #head attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> header: content [
	  self render: #header with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> header: attrs with: content [
	  self render: #header attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> hgroup: content [
	  self render: #hgroup with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> hgroup: attrs with: content [
	  self render: #hgroup attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> hr [
	  self renderEmpty: #hr
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> hr: attrs [
	  self renderEmpty: #hr attrs: attrs
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> html: content [
	  self render: #html with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> html: attrs with: content [
	  self render: #html attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> i: content [
	  self render: #i with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> i: attrs with: content [
	  self render: #i attrs: attrs with: content
]

{ #category : #accessing }
HTMLRenderer >> id [

	^ id
]

{ #category : #accessing }
HTMLRenderer >> id: componentId [
	"set the next component id, that will be added as data attribute to the next element"
	id := componentId.
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> iframe: content [
	  self render: #iframe with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> iframe: attrs with: content [
	  self render: #iframe attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> image: content [
	  self render: #image with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> image: attrs with: content [
	  self render: #image attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> img [
	  self renderEmpty: #img
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> img: attrs [
	  self renderEmpty: #img attrs: attrs
]

{ #category : #rendering }
HTMLRenderer >> initialize [
	attributeRenderer := LWAttributeRenderer new.
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> input [
	  self renderEmpty: #input
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> input: attrs [
	  self renderEmpty: #input attrs: attrs
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> ins: content [
	  self render: #ins with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> ins: attrs with: content [
	  self render: #ins attrs: attrs with: content
]

{ #category : #rendering }
HTMLRenderer >> isAttributes: content [
	^ (content isDictionary) | (content isArray)
]

{ #category : #rendering }
HTMLRenderer >> isVoidElement: tag [ 
 ^ VoidElementTags includes: tag 
]

{ #category : #'as yet unclassified' }
HTMLRenderer >> js: jsScriptOrBlock [
	"Add JS script. The script can be either a string or a block called with WriteStream to stream it.
	If doing initial render, a script tag will be generated that runs the script on load.
	If rerendering a component, the JS will be sent as an eval patch through the page connection.
	
	Within the JS code 'this' refers to the element currently being rendered.
	"
	jsWriter 
	 ifNil: [ 
		"Doing initial render."
		self script: [  
			out << 'window.addEventListener("load",function(){(function(){'.
			self writeJS: jsScriptOrBlock on: out.
			out << '}).bind(_lw.get('; << component id asString; << '))() });'
			 ]
		 ]
	 ifNotNil:  [ 
		"Writer is present, output to it"
		self writeJS: jsScriptOrBlock on: jsWriter
		 ]
]

{ #category : #accessing }
HTMLRenderer >> jsWriter: anObject [

	jsWriter := anObject
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> kbd: content [
	  self render: #kbd with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> kbd: attrs with: content [
	  self render: #kbd attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> keygen: content [
	  self render: #keygen with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> keygen: attrs with: content [
	  self render: #keygen attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> label: content [
	  self render: #label with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> label: attrs with: content [
	  self render: #label attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> legend: content [
	  self render: #legend with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> legend: attrs with: content [
	  self render: #legend attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> li: content [
	  self render: #li with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> li: attrs with: content [
	  self render: #li attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> line: content [
	  self render: #line with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> line: attrs with: content [
	  self render: #line attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> linearGradient: content [
	  self render: #linearGradient with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> linearGradient: attrs with: content [
	  self render: #linearGradient attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> link [
	  self renderEmpty: #link
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> link: attrs [
	  self renderEmpty: #link attrs: attrs
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> main: content [
	  self render: #main with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> main: attrs with: content [
	  self render: #main attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> map: content [
	  self render: #map with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> map: attrs with: content [
	  self render: #map attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> mark: content [
	  self render: #mark with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> mark: attrs with: content [
	  self render: #mark attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> marker: content [
	  self render: #marker with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> marker: attrs with: content [
	  self render: #marker attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> mask: content [
	  self render: #mask with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> mask: attrs with: content [
	  self render: #mask attrs: attrs with: content
]

{ #category : #rendering }
HTMLRenderer >> maybeProcessCallbackAttr: name value: value [ 
 ('on*' match: name) & (value isBlock | (value class = LWScriptCallback))
 ifTrue: [ ^ value asLWScriptCallback
 				asJS: (ctx registerCallback: value for: component)
 				forComponent: component id ].
 ^ value "not a callback, return value as is"

]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> menu: content [
	  self render: #menu with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> menu: attrs with: content [
	  self render: #menu attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> menuitem: content [
	  self render: #menuitem with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> menuitem: attrs with: content [
	  self render: #menuitem attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> mesh: content [
	  self render: #mesh with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> mesh: attrs with: content [
	  self render: #mesh attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> meshgradient: content [
	  self render: #meshgradient with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> meshgradient: attrs with: content [
	  self render: #meshgradient attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> meshpatch: content [
	  self render: #meshpatch with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> meshpatch: attrs with: content [
	  self render: #meshpatch attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> meshrow: content [
	  self render: #meshrow with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> meshrow: attrs with: content [
	  self render: #meshrow attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> meta [
	  self renderEmpty: #meta
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> meta: attrs [
	  self renderEmpty: #meta attrs: attrs
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> metadata: content [
	  self render: #metadata with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> metadata: attrs with: content [
	  self render: #metadata attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> meter: content [
	  self render: #meter with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> meter: attrs with: content [
	  self render: #meter attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> mpath: content [
	  self render: #mpath with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> mpath: attrs with: content [
	  self render: #mpath attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> nav: content [
	  self render: #nav with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> nav: attrs with: content [
	  self render: #nav attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> noscript: content [
	  self render: #noscript with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> noscript: attrs with: content [
	  self render: #noscript attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> object: content [
	  self render: #object with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> object: attrs with: content [
	  self render: #object attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> ol: content [
	  self render: #ol with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> ol: attrs with: content [
	  self render: #ol attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> optgroup: content [
	  self render: #optgroup with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> optgroup: attrs with: content [
	  self render: #optgroup attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> option: content [
	  self render: #option with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> option: attrs with: content [
	  self render: #option attrs: attrs with: content
]

{ #category : #accessing }
HTMLRenderer >> out [ 
  ^ out

]

{ #category : #accessing }
HTMLRenderer >> out: aWriteStream [
	"set the output stream"
	out := aWriteStream 	
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> output: content [
	  self render: #output with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> output: attrs with: content [
	  self render: #output attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> p: content [
	  self render: #p with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> p: attrs with: content [
	  self render: #p attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> param [
	  self renderEmpty: #param
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> param: attrs [
	  self renderEmpty: #param attrs: attrs
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> path: content [
	  self render: #path with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> path: attrs with: content [
	  self render: #path attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> pattern: content [
	  self render: #pattern with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> pattern: attrs with: content [
	  self render: #pattern attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> picture: content [
	  self render: #picture with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> picture: attrs with: content [
	  self render: #picture attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> polygon: content [
	  self render: #polygon with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> polygon: attrs with: content [
	  self render: #polygon attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> polyline: content [
	  self render: #polyline with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> polyline: attrs with: content [
	  self render: #polyline attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> pre: content [
	  self render: #pre with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> pre: attrs with: content [
	  self render: #pre attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> progress: content [
	  self render: #progress with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> progress: attrs with: content [
	  self render: #progress attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> q: content [
	  self render: #q with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> q: attrs with: content [
	  self render: #q attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> radialGradient: content [
	  self render: #radialGradient with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> radialGradient: attrs with: content [
	  self render: #radialGradient attrs: attrs with: content
]

{ #category : #'writing text' }
HTMLRenderer >> raw: text [
	"Output text RAW to current position.
	Text is not escaped for HTML entities and may contain scripts."
	out nextPutAll: text.
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> rect: content [
	  self render: #rect with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> rect: attrs with: content [
	  self render: #rect attrs: attrs with: content
]

{ #category : #rendering }
HTMLRenderer >> render: aTag attrs: attrs with: content [
   | t |
   t := aTag asString.
	out nextPut: $<; 
		 nextPutAll: t.
		
	self renderComponentId.
		  
	"Output all attributes"
	self renderAttrs: attrs.
	out	 nextPut: $>.

 	"Output content (static or a block)"
	self renderContent: content.
	
	"Output tag end"
	out nextPutAll: '</'; nextPutAll: t; nextPut: $>.	
]

{ #category : #rendering }
HTMLRenderer >> render: aTag with: attrsOrContent [
   | t |
   t := aTag asString.
	out nextPut: $<; 
		 nextPutAll: t.
	self renderComponentId.
	(self isAttributes: attrsOrContent)
		ifTrue: [ 
			self renderAttrs: attrsOrContent.
			(self isVoidElement: t)
			  ifTrue: [ out nextPutAll: '>' ]
			  ifFalse: [ out nextPutAll: '></'; nextPutAll: t; nextPut: $>]
		]
		ifFalse: [ 
			out nextPut: $>.
			self renderContent: attrsOrContent.
			out nextPutAll: '</'; nextPutAll: t; nextPut: $>.	
		].
]

{ #category : #rendering }
HTMLRenderer >> renderAttrs: attrs [
	"Output all attributes"

	(attrs isDictionary
		 ifTrue: [ attrs associations ]
		 ifFalse: [ attrs ])
		collect: [ :attr | attributeRenderer render: attr ]
		thenDo: [ :attr |
			| name value |
			name := attr key asString.
			value := attr value.

			(BooleanAttributes includes: name)
				ifTrue: [ "boolean attr, only output the name if value is not false/nil"
					value isNil | (value = false) ifFalse: [
						out
							nextPut: Character space;
							nextPutAll: name ] ]
				ifFalse: [
					value := self maybeProcessCallbackAttr: name value: value.  
					
					out
						nextPut: Character space;
						nextPutAll: name;
						nextPutAll: '="'.
					self escapeHtml: value asString to: out.
					out nextPut: $" ] ]
]

{ #category : #rendering }
HTMLRenderer >> renderComponentId [
	"render id (if any) as data attribute and set it to nil"
	id ifNotNil: [ out nextPutAll: ' data-lw="'; nextPutAll: id asString; nextPut: $" ].
	id := nil.

]

{ #category : #rendering }
HTMLRenderer >> renderContent: blockOrStatic [ 
	blockOrStatic isBlock 
		ifTrue: [ 
			blockOrStatic argumentCount = 0
				ifFalse: [ blockOrStatic value: self ]
				ifTrue: [ blockOrStatic value ] ]
		ifFalse: [ self escapeHtml: blockOrStatic asString to: out ].
	
]

{ #category : #rendering }
HTMLRenderer >> renderEmpty: aTag [
   | t |
   t := aTag asString.
	out nextPut: $<; nextPutAll: t.
	self renderComponentId.
	out nextPutAll: '/>'.
	
]

{ #category : #rendering }
HTMLRenderer >> renderEmpty: aTag attrs: attrs [
   | t |
   t := aTag asString.
	out nextPut: $<; nextPutAll: t.
	self renderComponentId.
	self renderAttrs: attrs.
	out nextPutAll: '/>'.
	
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> rp: content [
	  self render: #rp with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> rp: attrs with: content [
	  self render: #rp attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> rt: content [
	  self render: #rt with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> rt: attrs with: content [
	  self render: #rt attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> ruby: content [
	  self render: #ruby with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> ruby: attrs with: content [
	  self render: #ruby attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> s: content [
	  self render: #s with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> s: attrs with: content [
	  self render: #s attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> samp: content [
	  self render: #samp with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> samp: attrs with: content [
	  self render: #samp attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> script: content [
	  self render: #script with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> script: attrs with: content [
	  self render: #script attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> section: content [
	  self render: #section with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> section: attrs with: content [
	  self render: #section attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> select: content [
	  self render: #select with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> select: attrs with: content [
	  self render: #select attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> set: content [
	  self render: #set with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> set: attrs with: content [
	  self render: #set attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> slot: content [
	  self render: #slot with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> slot: attrs with: content [
	  self render: #slot attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> small: content [
	  self render: #small with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> small: attrs with: content [
	  self render: #small attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> source [
	  self renderEmpty: #source
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> source: attrs [
	  self renderEmpty: #source attrs: attrs
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> span: content [
	  self render: #span with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> span: attrs with: content [
	  self render: #span attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> stop: content [
	  self render: #stop with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> stop: attrs with: content [
	  self render: #stop attrs: attrs with: content
]

{ #category : #'instance creation' }
HTMLRenderer >> streamContents: aBlock [
	"Run given block with the current output stream. Nothing is escaped, content is streamed as is."
	aBlock value: out
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> strong: content [
	  self render: #strong with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> strong: attrs with: content [
	  self render: #strong attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> style: content [
	  self render: #style with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> style: attrs with: content [
	  self render: #style attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> sub: content [
	  self render: #sub with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> sub: attrs with: content [
	  self render: #sub attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> summary: content [
	  self render: #summary with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> summary: attrs with: content [
	  self render: #summary attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> svg: content [
	  self render: #svg with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> svg: attrs with: content [
	  self render: #svg attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> switch: content [
	  self render: #switch with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> switch: attrs with: content [
	  self render: #switch attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> symbol: content [
	  self render: #symbol with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> symbol: attrs with: content [
	  self render: #symbol attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> table: content [
	  self render: #table with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> table: attrs with: content [
	  self render: #table attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> tbody: content [
	  self render: #tbody with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> tbody: attrs with: content [
	  self render: #tbody attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> td: content [
	  self render: #td with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> td: attrs with: content [
	  self render: #td attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> template: content [
	  self render: #template with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> template: attrs with: content [
	  self render: #template attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> text: content [
	  self render: #text with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> text: attrs with: content [
	  self render: #text attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> textPath: content [
	  self render: #textPath with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> textPath: attrs with: content [
	  self render: #textPath attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> textarea: content [
	  self render: #textarea with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> textarea: attrs with: content [
	  self render: #textarea attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> tfoot: content [
	  self render: #tfoot with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> tfoot: attrs with: content [
	  self render: #tfoot attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> th: content [
	  self render: #th with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> th: attrs with: content [
	  self render: #th attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> thead: content [
	  self render: #thead with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> thead: attrs with: content [
	  self render: #thead attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> time: content [
	  self render: #time with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> time: attrs with: content [
	  self render: #time attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> title: content [
	  self render: #title with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> title: attrs with: content [
	  self render: #title attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> tr: content [
	  self render: #tr with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> tr: attrs with: content [
	  self render: #tr attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> track [
	  self renderEmpty: #track
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> track: attrs [
	  self renderEmpty: #track attrs: attrs
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> tspan: content [
	  self render: #tspan with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> tspan: attrs with: content [
	  self render: #tspan attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> u: content [
	  self render: #u with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> u: attrs with: content [
	  self render: #u attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> ul: content [
	  self render: #ul with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> ul: attrs with: content [
	  self render: #ul attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> use: content [
	  self render: #use with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> use: attrs with: content [
	  self render: #use attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> var: content [
	  self render: #var with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> var: attrs with: content [
	  self render: #var attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> video: content [
	  self render: #video with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> video: attrs with: content [
	  self render: #video attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> view: content [
	  self render: #view with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> view: attrs with: content [
	  self render: #view attrs: attrs with: content
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> wbr [
	  self renderEmpty: #wbr
]

{ #category : #'autogenerated rendering' }
HTMLRenderer >> wbr: attrs [
	  self renderEmpty: #wbr attrs: attrs
]

{ #category : #rendering }
HTMLRenderer >> withAttributeRenderer: newAttributeRenderer [
	"Sets the new attribute renderer.
	The current attribute renderer is set as parent of the new one."
	newAttributeRenderer parent: attributeRenderer.
	attributeRenderer := newAttributeRenderer  
]

{ #category : #'writing text' }
HTMLRenderer >> write: writeable [ 
	"Write an object directly to the output stream. The object must respond to writeOn: "
	writeable writeOn: out
]

{ #category : #writing }
HTMLRenderer >> writeJS: aScriptOrBlock on: stream [ 
 aScriptOrBlock isString 
 ifTrue: [ stream << aScriptOrBlock ]
 ifFalse: [ aScriptOrBlock value: stream ]
]
